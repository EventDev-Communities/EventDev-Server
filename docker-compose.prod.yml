services:
  redis-cache:
    image: redis:7-alpine
    container_name: redis-cache-prod
    env_file:
      - .env
    restart: always
    expose:
      - "${REDIS_PORT}"
    volumes:
      - redis-cache-prod-data:/data
    networks:
      - eventdev-prod-network
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  postgres-db:
    image: postgres:15-alpine
    container_name: postgres-db-prod
    env_file:
      - .env
    restart: always
    expose:
      - "${DATABASE_PORT}"
    volumes:
      - postgres-db-prod-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - eventdev-prod-network
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  api:
    build:
      context: .
      dockerfile: .docker/node/Dockerfile.prod
      target: app
      args:
        - NODE_ENV=production
    container_name: api-prod
    env_file:
      - .env
    restart: unless-stopped
    expose:
      - "${NODE_PORT}"
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=redis://redis-cache:${REDIS_PORT}
      - NODE_PORT=${NODE_PORT}
      - NODE_ENV=production
      - SUPERTOKENS_CONNECTION_URI=http://supertokens-auth:${SUPERTOKENS_PORT}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${NODE_PORT}/health"]
      interval: 15s
      timeout: 5s
      start_period: 30s
      retries: 3
    depends_on:
      redis-cache:
        condition: service_started
      postgres-db:
        condition: service_healthy
      supertokens-auth:
        condition: service_started
    networks:
      - eventdev-prod-network
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M


  supertokens-auth:
    image: supertokens/supertokens-postgresql
    container_name: supertokens-auth-prod
    restart: unless-stopped
    expose:
      - "${SUPERTOKENS_PORT}"
    environment:
      - POSTGRESQL_HOST=postgres-db
      - POSTGRESQL_PORT=${DATABASE_PORT}
      - POSTGRESQL_USER=${POSTGRES_USER}
      - POSTGRESQL_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRESQL_DATABASE_NAME=${POSTGRES_DB}
      - POSTGRESQL_TABLE_SCHEMA=supertokens
    depends_on:
      postgres-db:
        condition: service_healthy
    networks:
      - eventdev-prod-network
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

volumes:
  postgres-db-prod-data:
  redis-cache-prod-data:

networks:
  eventdev-prod-network:
    name: eventdev-prod-network
    driver: external
